#!/bin/bash
#random password generator v2
#by looneytkp
set -xe;e="echo -e";r="read -p";one=$1;two=$2;three=$3;four=$4;five=$5;six=$6;seven=$7;eigth=$8
nine=$9;STR='\e[9m';IKE='\e[0m';NC='\033[0m';LG="\033[1;32m";LR='\033[1;31m';
VERS='testing'
exe=mkpasswd;bin=/usr/bin/$exe;path=~/.configfile/passwords.txt;path1=~/.configfile/.updatefile
directory=~/.configfile;path2=$directory/.local-updatefile;path3=~$directory/.changelogs-all
info="To save passwords, an ID of what the password is being used for is assigned to "
info2="the password to help remember the purpose of the password. Example 'ID: yahoo'"
info_txt() {
$e $info; $e $info2
}
text="type '$exe'    for more info"
link="https://github.com/looneytkp/make-passwd/blob/master/$exe"
link2="https://github.com/looneytkp/make-passwd/archive/master.zip"
short() {
</dev/urandom tr -dc '9538207164!@#?$%DJALGSKHFqwertypoiuMZNXBCVfldkahjsPQOWEIRUTY' | head -c8; echo ""
}
long() {
strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo
}
shopt -u nocasematch
case $one in
"") $e testing
if [ ! -d ~/.configfile ];then mkdir ~/.configfile;touch $path
else if [ -d ~/.configfile -a -e ~/.configfile/passwords ];then 
mv ~/.configfile/passwords $path;fi;fi;;

-l|-s) create() { create2() { for ID in $two $three $four $five $six $seven $eight $nine;do
if [[ $one = "-l" ]];then if grep -iwq "$ID" $path;then
sed_ID=$(grep -iw $ID $path | sed "s/"$ID": //")
$e "- Password for ${LG}$ID${NC} exists -> [ ${LG}$sed_ID${NC} ]"
$r "- Update password ? <y/n> " pass;case $pass in
y) grep_ID=$(grep -iw $ID $path | sed "s/$ID: //")
$e "- Previous password -> [ ${LR}${STR}$grep_ID${IKE}${NC} ]"
sed -i "s/$ID: .*/$ID: "$(long)"/" $path;grep_ID_2=$(grep -iw "$ID" $path | sed "s/$ID: //")
$e "- New password for $ID -> [ ${LG}$grep_ID_2${NC} ]";$e;;
n) $e "- ${LG}$ID${NC} is not updated."; $e;;esac;else long=$(long)
$e "- Password for ${LG}$ID${NC} is -> [ ${LG}$long${NC} ]";$e "$ID: $long" >> $path;fi;
else if grep -iwq "$ID" $path;then sed_ID=$(grep -iw $ID $path | sed "s/$ID: //")
$e "- Password for ${LG}$ID${NC} exists -> [ ${LG}$sed_ID${NC} ]"
$r "- Update password? <y/n> " pass;case $pass in
y) grep_ID=$(grep -iw $ID $path | sed "s/$ID: //")
$e "- Previous password -> [ ${LR}${STR}$grep_ID${IKE}${NC} ]"
sed -i "s/$ID: .*/$ID: "$(short)"/" $path;grep_ID_2=$(grep -iw "$ID" $path | sed "s/$ID: //")
$e "- New password for $ID -> [ ${LG}$grep_ID_2${NC} ]";$e;;
n) $e "- ${LG}$ID${NC} is not updated.";$e;;esac; else short=$(short)
$e "- Password for ${LG}$ID${NC} is -> [ ${LG}$short${NC} ]";
$e "$ID: $short" >> $path;fi;fi;done;$e;$e $text;$e 
}
if [[ "$two" != "" ]];then if [[ $one = "-l" ]];then $e;$e "[Long Password]";$e; create2
else $e;$e "[Short password]";$e;create2;fi;
else if [[ $one = "-l" ]];then $e;$e "[Long Password]";info_txt;$e
enter_id_l() { $r "- Enter ID: " name
case $name in
"") $e "${LR}-X${NC} ID required!!! Input an ID below.";enter_id_l;;
*) if grep -iwq "$name" $path;then sed_ID=$(grep -iw $name $path | sed "s/$name: //")
$e "- Password for ${LG}$name${NC} exists -> [ ${LG}$sed_ID${NC} ]"
$r "- Update password ? <y/n> " pass;case $pass in
y) grep_ID=$(grep -iw $name $path | sed "s/$name: //")
$e "- Previous password -> [ ${LR}${STR}$grep_ID${IKE}${NC} ]"
sed -i "s/$name: .*/$name: $(long)/" $path
grep_ID_2=$(grep -iw $name $path | sed "s/$name: //")
$e "- New password for ${LG}$name${NC} -> [ ${LG}$grep_ID_2${NC} ]";text;;
n) $e "- ${LG}$name${NC} is not updated.";$e;$e $text;$e;;esac;else long=$(long)
$e "- Password for ${LG}$name${NC} is -> [ ${LG}$long${NC} ]";$e;$e $text;$e
$e "$name: $long" >> $path;fi;;esac
}
enter_id_l
else $e;$e "[Short password]";info_txt;$e;
enter_id_s() {
$r "- Enter ID: " name;
case $name in
"") $e "${LR}-X${NC} ID required!!! Input an ID below.";enter_id_s;;
*) if grep -iwq "$name" $path;then
sed_ID=$(grep -iw $name $path | sed "s-$name: --")
$e "- Password for ${LG}$name${NC} exists -> [ ${LG}$sed_ID${NC} ]"
$r "- Update password ? <y/n> " pass;case $pass in
y) grep_ID=$(grep -iw $name $path | sed "s/$name: //")
$e "- Previous password -> [ ${LR}\e[9m$grep_ID\e[0m${NC} ]"
sed -i "s/$name: .*/$name: $(short)/" $path
grep_ID_2=$(grep -iw $name $path | sed "s/$name: //")
$e "- New password for ${LG}$name${NC} -> [ ${LG}$grep_ID_2${NC} ]";$e;$e $text;$e;;
n) $e "- ${LG}$name${NC} is not updated.";$e;$e $text;$e;;esac;else short=$(short)
$e "- Password for ${LG}$name${NC} is -> [ ${LG}$short${NC} ]";$e;$e $text;$e
$e "$name: $short" >> $path;fi;;esac
}
enter_id_s;fi;fi
}
create;;

-S) if [[ -e $path ]];then if [[ "$two" != "" ]];then if [[ "$one" = "-S" ]];then $e
$e "[Search]"; $e;for ID in $two $three $four $five $six $seven $eight $nine;do
if grep -iwq "$ID" $path;then sed_ID=$(grep -iw "$ID" $path | sed "s/$ID: //")
$e "- ${LG}$ID${NC} password: ${LG}$sed_ID${NC}";else
$e "- Cannot find ${LG}$ID${NC} in password list!";fi;done;$e;$e $text;$e;fi;else
$e;$e "[Search]";info_txt;$e;
search_id() {
$r "Search ID: " search;case $search in
"") $e "${LR}-X${NC} ID required!!! Input an ID below.";search_id;;
*) if grep -iwq "$search" $path;then sed_sch=$(grep -iw "$search" $path | sed "s/$search: //")
$e "- ${LG}$search${NC} password: ${LG}$sed_sch${NC}";$e;$e $text;$e;else
$e "- Cannot find ${LG}$ID${NC} in password list!";$e;$e $text;$e;fi;;esac
}
search_id;fi; else $e "- No passwords have been saved yet.";fi;;

"-L") size=$(wc -c <$path);if [ -e $path -a $size -gt 0 ]; then $e
$e "List of saved passwords:";$e;cat -n $path;$e;$e $text;$e;else $e
$e "- No passwords have been saved yet.";$e;$e $text;$e;fi;;

-b) ;;

-r) $e;;

-d) ;;

-D) ;;

-i) 
if [ -e $bin -a -d $directory -a -e $path -a -e $path2 ]; then 
$e "v2 upwards"
cat .changelogs;$r "Update ? <Y/n> " up1
 if [[ $up1 = y ]]; then chmod 755 $exe; sudo cp $exe $bin
cp {.local-updatefile,.changelogs-all} $directory
$exe
  else $e;exit
  fi
elif [ -e $bin -a -d $directory -a -e $path -a ! -e $path2 ]; then
$e "v1 to v2"
if [[ -e ~/.configfile/passwords ]]; then 
chmod 755 $exe && sudo cp $exe $bin;
mv passwdords $path;fi
cp {.local-updatefile,.changelogs-all} $directory
if [ -e /usr/bin/db ]; then sudo rm /usr/bin/db;fi
$exe
else if [ ! -e $bin -a ! -d $directory ]; then $e "first time"
cat .changelogs
chmod 755 $exe;sudo cp $exe $bin;
mkdir $directory;cp {.local-updatefile,.changelogs-all} $directory
 $exe
fi

fi

;;

-u) #$e "[Update]";$e;$e "Checking for updates...";
#if [[ -d $directory ]];then cd $directory
#  if [[ -e $path2 ]]; then wget -O $directory/master.zip -q $link2;
#    if grep -iwq "md5" $path2;then
#    unzip -ojq master.zip make-passwd-master/.md5
#    md5=$(grep -iw "md5" $path1 | sed "s/md5: //")
#    sha1=$(grep -iw "sha1sum" $path1 | sed "s/sha1sum: //")
#    new_md5=$(md5sum master.zip)
#    new_sha1=$(sha1sum master.zip)
#      if [ "$md5" -eq "$new_md5" -a "$new_sha1" -eq "$sha1" ]; then
#      $e "Latest version is already installed: $VERS"
#      else $e "New update available"
#      unzip -p master.zip make-passwd-master/.changelogs
#      $r "Update ? <Y/n> " update;
#        if [ $update = y ]; then $e "Updating..."
#        unzip -o master.zip; bash mak.*ter/install.sh -u
#        else $e;$e $text;$e
#        fi
#      fi
#    else unzip -

;;

#fi
#fi
#fi
#fi
#if [ "$md5" -eq "$new_md5" -a "$new_sha1" -eq "$sha1" ] then
#$e "Latest version is already installed.";else
#unzip -p master.zip make-passwd-master/.changelogs;$e;$r "Update ? <Y/n> " update;
#if [[ $update = y ]]; then unzip -o master.zip;bash mas.*ter/install.sh;
#else fi; else $e;$e "Latest version is already installed";fi
#else unzip -oq master.zip; bash mak.*ter/install.sh;else unzip -oq master.zip;
#bash mak.*ter/install.sh;fi;rm ma*;;

-U) ;;

-c) ;;
esac
