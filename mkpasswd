#!/bin/bash
#random password generator
#by looneytkp
set -e
e=echo
r="read -p"
arg="$1"
st="$2"
nd="$3"
rd="$4"
th="$5"
VERS=v3.5.8
#http://google.com/cr
bin=/usr/bin/mkpasswd
path=~/.configfile/passwords
path2=~/.configfile/.config1
path3=~/.configfile/.config2
path4=~/.configfile/.config3
path5=~/.configfile/.config4
path6=~/.configfile/.update
word='type "mkpasswd --list"   to show the list of saved passwords'
word1='type "mkpasswd --search"   to search for a saved password'
word2='type "mkpasswd"     for more info'
short() {
</dev/urandom tr -dc '9538207164!@#?$%&DJALGSKHFqwertypoiuMZNXBCVfldkahjsPQOWEIRUTY' | head -c8; echo ""
}
long() {
strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo
}
NC='\033[0m'
LG='\033[1;32m'
LR='\033[1;31m'
link="https://github.com/looneytkp/make-passwd/blob/master/mkpasswd"
link2="https://github.com/looneytkp/make-passwd/archive/master.zip"
#getpasswd=google.com/cr
shopt -u nocasematch
two() {
if [ "$arg" = "-l" ]; then
if grep -iwq "$st" $path; then
sed_2=$(grep -iw "$st" $path | sed "s-"$st": --")
$e -e "password for $st exists -> [ ${LG}$sed_2${NC} ]"
$r "wanna update the password? <y/n> #? " pd2
case $pd2 in
y) grep2=$(grep -iw $st $path | sed "s-$st: --")
$e -e "previous password -> [ ${LR}\e[9m$grep2\e[0m${NC} ]" && sed -i "s/$st: .*/$st: $(long)/" $path
grep2a=$(grep -iw $st $path | sed "s-$st: --")
$e -e "new password for $st-> [ ${LG}$grep2a${NC} ]" && $e;;
n) ;;
esac
else long=$(long)
$e -e "password for $st is: [ ${LG}$long${NC} ]"
$e "$st: $long" >> $path
fi
else if grep -iwq "$st" $path; then
sed_2=$(grep -iw $st $path | sed "s-$st: --")
$e -e "password for $st exists -> [ ${LG}$sed_2${NC} ]"
$r "wanna update the password? <y/n> #? " pd2
case $pd2 in
y) grep2=$(grep -iw $st $path | sed "s-$st: --")
$e -e "previous password -> [ ${LR}\e[9m$grep2\e[0m${NC} ]" && sed -i "s/$st: .*/$st: $(short)/" $path
grep2a=$(grep -iw $st $path | sed "s-$st: --")
$e -e "new password for $st-> [ ${LG}$grep2a${NC} ]" && $e;;
n) ;;
esac
else short=$(short)
$e -e "password for $st is: [ ${LG}$short${NC} ]"
$e "$st: $short" >> $path
fi
fi
}
three() {
if [ "$arg" = "-l" ]; then
if grep -iwq "$nd" $path; then
sed_3=$(grep -iw $nd $path | sed "s-$nd: --")
$e -e "password for $nd exists -> [ ${LG}$sed_3${NC} ]"
$r "wanna update the password? <y/n> #? " pd3
case $pd3 in
y) grep3=$(grep -iw $nd $path | sed "s-$nd: --")
$e -e "previous password -> [ ${LR}\e[9m$grep3\e[0m${NC} ]" && sed -i "s/$nd: .*/$nd: $(long)/" $path
grep3a=$(grep -iw $nd $path | sed "s-$nd: --")
$e -e "new password for $nd-> [ ${LG}$grep3a${NC} ]" && $e;;
n) ;;
esac
else long=$(long)
$e -e "password for $nd is: [ ${LG}$long${NC} ]"
$e "$nd: $long" >> $path
fi
else if grep -iwq "$nd" $path; then
sed_3=$(grep -iw $nd $path | sed "s-$nd: --")
$e -e "password for $nd exists -> [ ${LG}$sed_3${NC} ]"
$r "wanna update the password? <y/n> #? " pd3
case $pd3 in
y) grep3=$(grep -iw $nd $path | sed "s-$nd: --")
$e -e "previous password -> [ ${LR}\e[9m$grep3\e[0m${NC} ]" && sed -i "s/$nd: .*/$nd: $(short)/" $path
grep3a=$(grep -iw $nd $path | sed "s-$nd: --")
$e -e "new password for $nd-> [ ${LG}$grep3a${NC} ]" && $e;;
n) ;;
esac
else short=$(short)
$e -e "password for $nd is: [ ${LG}$short${NC} ]"
$e "$nd: $short" >> $path
fi
fi
}
four() {
if [ "$arg" = "-l" ]; then
if grep -iwq "$rd" $path; then
sed_4=$(grep -iw $rd $path | sed "s-$rd: --")
$e -e "password for $rd exists -> [ ${LG}$sed_4${NC} ]"
$r "wanna update the password? <y/n> #? " pd4
case $pd4 in
y) grep4=$(grep -iw $rd $path | sed "s-$rd: --")
$e -e "previous password -> [ ${LR}\e[9m$grep4\e[0m${NC} ]" && sed -i "s/$rd: .*/$rd: $(long)/" $path
grep4a=$(grep -iw $rd $path | sed "s-$rd: --")
$e -e "new password for $rd-> [ ${LG}$grep4a${NC} ]" && $e;;
n) ;;
esac
else long=$(long)
$e -e "password for $rd is: [ ${LG}$long${NC} ]"
$e "$rd: $long" >> $path
fi
else if grep -iwq "$rd" $path; then
sed_4=$(grep -iw $rd $path | sed "s-$rd: --")
$e -e "password for $rd exists -> [ ${LG}$sed_4${NC} ]"
$r "wanna update the password? <y/n> #? " pd4
case $pd4 in
y) grep4=$(grep -iw $rd $path | sed "s-$rd: --")
$e -e "previous password -> [ ${LR}\e[9m$grep4\e[0m${NC} ]" && sed -i "s/$rd: .*/$rd: $(short)/" $path
grep4a=$(grep -iw $rd $path | sed "s-$rd: --")
$e -e "new password for $rd-> [ ${LG}$grep4a${NC} ]" && $e;;
n) ;;
esac
else short=$(short)
$e -e "password for $rd is: [ ${LG}$short${NC} ]"
$e "$rd: $short" >> $path
fi
fi
}
five() {
if [ "$arg" = "-l" ]; then
if grep -iwq "$th" $path; then
sed_5=$(grep -iw $th $path | sed "s-$th: --")
$e -e "password for $th exists -> [ ${LG}$sed_5${NC} ]"
$r "wanna update the password? <y/n> #? " pd5
case $pd5 in
y) grep5=$(grep -iw $th $path | sed "s-$th: --")
$e -e "previous password -> [ ${LR}\e[9m$grep5\e[0m${NC} ]" && sed -i "s/$th: .*/$th: $(long)/" $path
grep5a=$(grep -iw $th $path | sed "s-$th: --")
$e -e "new password for $th-> [ ${LG}$grep5a${NC} ]" && $e;;
n) ;;
esac
else long=$(long)
$e -e "password for $th is: [ ${LG}$long${NC} ]"
$e "$th: $long" >> $path && $e
fi
else if grep -iwq "$th" $path; then
sed_5=$(grep -iw $th $path | sed "s-$th: --")
$e -e "password for $th exists -> [ ${LG}$sed_5${NC} ]"
$r "wanna update the password? <y/n> #? " pd5
case $pd5 in
y) grep5=$(grep -iw $th $path | sed "s-$th: --")
$e -e "previous password -> [ ${LR}\e[9m$grep5\e[0m${NC} ]" && sed -i "s/$th: .*/$th: $(short)/" $path
grep5a=$(grep -iw $th $path | sed "s-$th: --")
$e -e "new password for $th-> [ ${LG}$grep5a${NC} ]" && $e;;
n) ;;
esac
else short=$(short)
$e -e "password for $th is: [ ${LG}$short${NC} ]"
$e "$th: $short" >> $path
fi
fi
}
question() {
if [ "$arg" = "-l" ]; then
$r "enter name: " name
if grep -iwq "$name" $path; then
sed_1=$(grep -iw $name $path | sed "s-$name: --")
$e -e "password for $name exists -> [ ${LG}$sed_1${NC} ]"
$r "wanna update the password? <y/n> #? " pd
case $pd in
y) grep1=$(grep -iw $name $path | sed "s-$name: --")
$e -e "previous password -> [ ${LR}\e[9m$grep1\e[0m${NC} ]" && sed -i "s/$name: .*/$name: $(long)/" $path
grep1a=$(grep -iw $name $path | sed "s-$name: --")
$e -e "new password for $name-> [ ${LG}$grep1a${NC} ]" && $e;;
n) ;;
esac
else long=$(long)
$e -e "password for $name is: [ ${LG}$long${NC} ]"
$e "$name: $long" >> $path
fi
else $r "enter name: " name
if grep -iwq "$name" $path; then
sed_1=$(grep -iw $name $path | sed "s-$name: --")
$e -e "password for $name exists -> [ ${LG}$sed_1${NC} ]"
$r "wanna update the password? <y/n> #? " pd
case $pd in
y) grep1=$(grep -iw $name $path | sed "s-$name: --")
$e -e "previous password -> [ ${LR}\e[9m$grep1\e[0m${NC} ]" && sed -i "s/$name: .*/$name: $(short)/" $path
grep1a=$(grep -iw $name $path | sed "s-$name: --")
$e -e "new password for $name-> [ ${LG}$grep1a${NC} ]"
$e;;
n) ;;
esac
else short=$(short)
$e -e "password for $name is: [ ${LG}$short${NC} ]"
$e "$name: $short" >> $path
fi
fi
}
clean() {
if [ -e $path2 -a -e $path3 -a -e $path4 -a -e $path5 ]; then
rm $path2 $path3 $path4 $path5
elif [ -e $path2 -a -e $path3 -a -e $path4 -a ! -e $path5 ]; then
rm $path2 $path3 $path4
else if [ -e $path2 -a -e $path3 -a ! -e $path4 -a ! -e $path5 ]; then
rm $path2 $path3
elif [ -e $path2 -a ! -e $path3 ]; then
rm $path2
else echo > /dev/null
fi
fi
}
strt() {
$e $st > $path2 && $e $nd > $path3
$e $rd > $path4 && $e $th > $path5
chk2=$(wc -w <$path2)
chk3=$(wc -w <$path3)
chk4=$(wc -w <$path4)
chk5=$(wc -w <$path5)
if [ "$arg" = "-l" -o "$arg" = "-s" ]; then
strt2
fi
}
strt2() {
if [ $chk2 = 1 -a $chk3 = 1 -a $chk4 = 1 -a $chk5 = 1 ]; then
$e && two && three && four && five && $e && $e $word; $e $word1; $e $word2 && $e
elif [ $chk2 = 1 -a $chk3 = 1 -a $chk4 = 1 -a $chk5 = 0 ]; then
$e && two && three && four && $e && $e $word; $e $word1; $e $word2 && $e
else if [ $chk2 = 1 -a $chk3 = 1 -a $chk4 = 0 -a $chk5 = 0 ]; then
$e && two && three && $e && $e $word; $e $word1; $e $word2 && $e
elif [ "$chk2" = 0 ]; then
$e && question && $e && $e $word; $e $word1; $e $word2 && $e
else $e && two && $e && $e $word; $e $word1; $e $word2 && $e
fi
fi
clean
}
case $arg in
"") if [ ! -d ~/.configfile ]; then mkdir ~/.configfile
touch ~/.configfile/passwords
elif [ -d ~/.configfile -a -e $path ]; then clean
fi
$e
$e "                    A Random Password Creator"
$e "                                      by looneytkp" && $e
$e 'Usage: mkpasswd [OPTION]... or mkpasswd [OPTION]... [NAME(S) TO ASSIGN PASSWORD TO]'
$e 'Generates passwords for each NAME passed to OPTION'
$e 'Example: mkpasswd -l or mkpasswd -l twitter gmail netflix skype' && $e
$e 'OPTION and interpretation'
$e '  mkpasswd           - displays info of mkpasswd'
$e '  -l, --long         - creates a long password, max names to pass = 4'
$e '  -s, --short        - creates a short password, max names to pass = 4'
$e '  -i, --internet     - creates password using an internet connection'
$e '  -S, --search       - searches for passwords, max names to pass = 1'
$e '  -L, --list         - lists all saved passwords'
$e '  -e, --export       - sends lists of passwords to your email as backup'
$e '  -d, --delete       - deletes saved passwords according to preference'
$e '  -D, --delete-all   - deletes entire list of saved passwords'
$e '  -u, --update       - updates mkpasswd to the latest version'
$e '  -U, --uninstall    - uninstalls mkpasswd'
$e '  -v, --version      - shows current version' && $e
$e 'A maximum number of four names can be passed to arguments -l, -s and -d.'
$e 'Only one can be passed to -S and -i, more improvements will be added to them.' && $e;;
"-l"|"--long") strt;;
"-s"|"--short") strt;;
"-i"|"--internet") $e "under development"
$e "only -l, -s, -S -L and -I works for now";;
"-S"|"--search") $e
chk2=$($e $st > $path2 | wc -w<$path2)
if [ $chk2 = 1 ]; then
rm $path2
if grep -iwq "$st" $path; then
edit1=$(grep -iw "$st" $path | sed "s_$st: __")
$e -e "$st password: ${LG}$edit1${NC}" && $e
else $e
$e "cannot find $st in the list of saved passwords"
$e 'type "mkpasswd -L" to list down all passwords' && $e
fi
else $r "search of: " search
case $search in
"") $e "input a name!";;
*) if grep -iwq "$search" $path; then
edit2=$(grep -iw "$search" $path | sed "s_$search: __")
$e -e "$search password: ${LG}$edit2${NC}" && $e
else $e
$e "cannot find $search in the list of saved passwords"
$e 'type "mkpasswd -L" to list down all passwords' && $e
fi;;
esac
fi;;
"-L"|"--list") ch=$(wc -c <$path)
if [ -e $path -a "$ch" -gt 0 ]; then
$e && $e "list of saved passwords:" && $e
cat -n $path && $e && $e $word1 && $e $word2 && $e
else $e && $e "no passwords have been saved"
$e && $e $word1 && $e $word2 && $e
fi;;
"-e"|"--export") $e "under development"
$e "only -l, -s, -S -L and -I works for now";;
"-d"|"--delete") strt
if [ $chk2 = 1 -a $chk3 = 1 -a $chk4 = 1 -a $chk5 = 1 ]; then $e
if grep -iwq "$st" $path; then sed -i "/"$st": .*/d" $path
$e "$st has been deleted"
else $e "cannot find $st"
fi
if grep -iwq "$nd" $path; then sed -i "/"$nd": .*/d" $path
$e "$nd has been deleted"
else $e "cannot find $nd"
fi
if grep -iwq "$rd" $path; then sed -i "/"$rd": .*/d" $path
$e "$rd has been deleted"
else $e "cannot find $rd"
fi
if grep -iwq "$th" $path; then sed -i "/"$th": .*/d" $path
$e "$th has been deleted"
else $e "cannot find $th"
fi
mkpasswd -L
elif [ $chk2 = 1 -a $chk3 = 1 -a $chk4 = 1 -a $chk5 = 0 ]; then
if grep -iwq "$st" $path; then sed -i "/"$st": .*/d" $path
$e "$st has been deleted"
else $e "cannot find $st"
fi
if grep -iwq "$nd" $path; then sed -i "/"$nd": .*/d" $path
$e "$nd has been deleted"
else $e "cannot find $nd"
fi
if grep -iwq "$rd" $path; then sed -i "/"$rd": .*/d" $path
$e "$rd has been deleted"
else $e "cannot find $rd"
fi
mkpasswd -L
else if [ $chk2 = 1 -a $chk3 = 1 -a $chk4 = 0 -a $chk5 = 0 ]; then
if grep -iwq "$st" $path; then sed -i "/"$st": .*/d" $path
$e "$st has been deleted"
else $e "cannot find $st"
fi
if grep -iwq "$nd" $path; then sed -i "/"$nd": .*/d" $path
$e "$nd has been deleted"
else $e "cannot find $nd"
fi
mkpasswd -L
elif [ "$chk2" = 0 ]; then $e
$r "delete: " del
if grep -iwq "$del" $path; then sed -i "/"$del": .*/d" $path
$e "$del has been deleted."
else $e "cannot find $del"
fi
mkpasswd -L
else if grep -iwq "$st" $path; then sed -i "/"$st": .*/d" $path
$e "$st has been deleted"
else $e "cannot find $st"
fi
mkpasswd -L
fi
fi;;
"-D"|"--delete-all") $e
$e "                      Beware of dragons!"
$e "Remember to backup, input mkpasswd -e to send the list to you email."
$r "The entire list of passwords will be deleted. Are you sure ? <y\n>: " sure
if [ $sure = y ]; then 
ch=$(wc -c <$path)
if [ -e $path -a "$ch" -gt 0 ]; then
sudo sed -i '/.*/d' $path
$e "All passwords have been deleted!" && $e
else mkpasswd --list
fi
else $r "Good choice, export passwords to email ? <y/n>: " exp
if [ $exp = y ]; then mkpasswd -e
else $e
fi
fi;;
"-u"|"--update") $e
$e "Checking for updates..." && curl -s $link > $path6
if grep -q "$VERS" $path6; then $e "You are on the latest version: $VERS"
$e
else #sed_=$(grep -q "vers" $path6 | sed "s-vers=--")
$e "New update available: "
wget -O ~/.configfile/master.zip -q $link2
unzip ~/.configfile/master.zip -d ~/.configfile
$e && bash ~/.configfile/make-passwd-master/install.sh --update
sed_vers=$(grep -q "$VERS" $bin | sed "s-vers=--")
$e && $e "mkpasswd has been updated to: $sed_vers" && $e
fi
rm -rf $path6 ~/.configfile/ma*;;
"-U"|"--uninstall") $e
if [ -e $bin ]; then
rm -rf ~/.configfile
sudo rm $bin && $e "mkpasswd is uninstalled! to install again type or copy and paste:"
$e "wget -O ~/Downloads/master.zip -q $link2 && cd ~/Downloads"
$e "unzip master.zip && bash make-passwd-master/install.sh && rm -rf mas.*zip make.*master"
$e
else $e "mkpasswd is not installed!"
fi
$e;;
"-v"|"--version") $e && $e "version: $VERS" && $e;;
esac
