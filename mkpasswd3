#!/bin/bash
#interactive password generator v3
set -e

VARIANT=$(uname -o)
ONE=$1;TWO=$2;THREE=$3;FOUR=$4;FIVE=$5;SIX=$6
STR='\e[9m';IKE='\e[0m';NC='\033[0m';LG="\033[1;32m";LR='\033[1;31m'
EXE="mkpasswd"
BIN=/usr/bin/$EXE
DIR=~/.configfile
PASSWORD=$DIR/passwords.txt
ACCOUNT=$DIR/.account
TOKEN_FILE=$DIR/.token
METADATA=$DIR/.metadata
ERROR_FILE=$DIR/.error
SIZE=$(wc -c <$PASSWORD);
GET="curl -X POST -s --show-error"
INFO_TXT() {
    INFO="To save passwords, an identity should be assigned to the password by the user "
    INFO2="to help remember the purpose of the password. Example of an identity is 'gmail'."
    INFO3="Use hyphens instead of spaces, example 'yahoo-mail' or '$USER-file'."
    echo "$INFO"; echo "$INFO2"; echo "$INFO3"
}
TEXT="type '$EXE' for more info";
LINK="https://github.com/looneytkp/make-passwd/blob/master/$EXE"
NULL="${LR}-X${NC} Null input!"
SHOW="type '$EXE -L' to show passwords"
SHORT() {
    </dev/urandom tr -dc '9538207164!@#?$%DJALGSKHFqwertypoiuMZNXBCVfldkahjsPQOWEIRUTY' | head -c8; echo ""
}
LONG() {
    strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; $e
}
CHECK() {
if [ ! -e $BIN ]; then
    echo "- $exe is not installed. Download & '${LG}bash mkpasswd -i or -i --all${NC}' to install.";
    exit
fi
}
shopt -u nocasematch
case $1 in

    #info
    "") CHECK
        echo -e "\nUsage: '$EXE [OPTION]...'"
        echo "OR: '$EXE [OPTION]... [ID]...'"
        echo "Generates and stores passwords with identities."
        echo -e "Example: $EXE -l nameOf-Identity\n";
        echo -e "OPTIONS selection and interpretation:\n"
        echo "  -l, --long                   - LONG passwords."
        echo "  -s, --short                  - SHORT passwords."
        echo "  -c, --custom                 - custom passwords."
        echo "  -L, --list                   - lists saved passwords."
        echo "  -d, --delete(-del)           - delete passwords."
        echo "  -D, --delete-all(-del-all)   - deletes all passwords."
        echo "  -b, --backup                 - backup passwords to Dropbox."
        echo "  -e, --edit                   - make changes to the passwsord file."
        echo -e "  -u, --uninstall              - uninstall $EXE.\n";;
    #info

    #long, short and custom passwords
    -s|-l|-c|--short|--long|--custom)
        PHASE_1() {
            SED_ID=$(grep -w ^"$ID" $PASSWORD | sed "s/"$ID": //")
                echo -e "- $ID exists: ${LG}$SED_ID${NC}"
                read -p "- Change password for $ID ? <y/n>: " UPDATE
                case $UPDATE in
                    "") echo -e $NULL;;
                    y)  GREP_ID=$(grep -w ^"$ID" $PASSWORD | sed "s/$ID: //")
                        echo -e "- Previous: ${LR}${STR}$GREP_ID${IKE}${NC}"
                        if [ $ONE = "-l" -o $ONE = "--long" ]; then
                            sed -i "s/$ID: .*/$ID: "$(LONG)"/" $PASSWORD
                        elif [ $ONE = "-s" -o $ONE = "--short" ]; then
                            sed -i "s/$ID: .*/$ID: "$(SHORT)"/" $PASSWORD
                        elif [ $ONE = "-c" -o $ONE = "--custom" ]; then
                            read -p "- New password: " NEW;
                            sed -i "s/$ID: .*/$ID: "$NEW"/" $PASSWORD
                        fi
                        GREP_ID=$(grep -w ^"$ID" $PASSWORD | sed "s/$ID: //")
                        echo -e "- New: ${LG}$GREP_ID${NC}";;
                    n)  if [[ $THREE == "" ]]; then
                            echo "- Aborted."
                            echo -e "\n$TEXT\n"; exit
                        fi;;
                esac
                  }
        PHASE_2() {
            if [ $ONE = "-l" -o $ONE = "--long" ]; then
                LONG=$(LONG);
                echo -e "- $ID: ${LG}$LONG${NC}"
                echo "$ID: $LONG" >> $PASSWORD
            elif [ $ONE = "-s" -o $ONE = "--short" ]; then
                SHORT=$(SHORT);
                echo -e "- $ID: ${LG}$SHORT${NC}"
                echo "$ID: $SHORT" >> $PASSWORD
            elif [ $ONE = "-c" -o $ONE = "--custom" ]; then
                printf "%b" "- Password for $ID:"; read -p " " PASS;
                case $PASS in
                    "") echo -e $NULL;;
                    *)  echo "$ID: $PASS" >> $PASSWORD;;
                esac
            fi
            WORK_AROUND=2
                  }
        TYPE() {
            if [ $ONE = "-l" -o $ONE = "--long" ]; then
                echo -e "[Long Password]\n";
            elif [ $ONE = "-s" -o $ONE = "--short" ]; then
                echo -e "[Short Password]\n"
            elif [ $ONE = "-c" -o $ONE = "--custom" ]; then
                echo -e "[Custom Password]\n"
            fi
               }
        END_TEXT() {
            if [[ $THREE == "" ]]; then
                echo -e "- Password is saved.\n"
                echo $SHOW
            else
                if [[ $WORK_AROUND == 2 ]]; then
                    if [[ $THREE == "" ]]; then
                        echo -e "\n- Password is saved.\n"
                        echo $SHOW
                    else
                        echo -e "\n- Passwords are saved.\n"
                        echo $SHOW
                    fi
                elif [ $THREE == "" -a $UPDATE == n ]; then
                    echo -e "- Aborted\n"
                    echo $SHOW
                elif [ $THREE != "" -a $UPDATE == n ]; then
                    echo -e "\n- Passwords are saved.\n"
                    echo $SHOW
                elif [ $THREE != "" -a $UPDATE == n ]; then
                    echo -e "\n- Aborted\n"
                    echo $SHOW
                elif [ $THREE == "" -a $UPDATE == y ]; then
                    echo -e "\n- Password is saved.\n"
                    echo $SHOW
                elif [ $THREE != "" -a $UPDATE == y ]; then
                    echo -e "\n- Passwords are saved.\n"
                    echo $SHOW
                fi
            fi
                   }
        MULTI() {
            TYPE
            for ID in $TWO $THREE $FOUR $FIVE $SIX
            do
                if grep -wq ^"$ID" $PASSWORD; then
                    PHASE_1
                else 
                    PHASE_2
                fi
            done;
            END_TEXT
                 }
        SINGLE() {
            TYPE && INFO_TXT
            read -p "Password identity: " ID
            echo
            case $ID in
                *)  if grep -wq ^"$ID" $PASSWORD; then
                        PHASE_1
                    else
                        PHASE_2
                    fi;;
            esac
            END_TEXT
                 }
        CHECK
        if [ "$TWO" != "" ]; then echo;
            MULTI; echo -e "$TEXT\n"
        elif [ "$TWO" == "" ]; then echo;
            SINGLE; echo -e "$TEXT\n"
        fi;;
        #long and short passwords

        #show list of passwords
        -L|--list)   CHECK
            if [ $SIZE -gt 0 ]; then
                echo -e "\n[List]\n"
                cat -n $PASSWORD
                echo -e "\n$TEXT\n"
            else
                echo -e "\n- No passwords have been saved yet\n";
                echo -e "\n$TEXT\n"
            fi;;
        #show list of passwords

        #edit
        -e|--edit)  CHECK
            if [[ $SIZE -gt 0 ]]; then
                xdg-open $PASSWORD
                echo -e "\n$TEXT\n"
            else
                $EXE -L
            fi;;
        #edit

        #delete
        -d|-del|-delete)
            DELETE() {
                if grep -iwq "$ID:" $PASSWORD; then
                    printf "%b" "- Delete ${LG}$ID${NC} ?"; read -p " <Y/n> " del;
                    case $del in
                        "") echo -e $NULL;;
                        y)  sed -i "/"$ID": .*/d" $PASSWORD
                            echo -e "- ${LG}$ID${NC} has been deleted";;
                        n)  echo "- Cancelled.";;
                    esac
                else
                    echo -e "${LR}-X${NC} ${LG}$ID${NC} does not exists."
                fi
                echo "type '$EXE -L' to show passwords"
                      }
                CHECK
                if [[ $SIZE -lt 1 ]]; then
                    $EXE -L
                fi
                echo -e "\n[Delete]\n"
                if [[ "$two" != "" ]]; then
                    for ID in $two $three $four $five $six
                    do
                        DELETE
                    done
                    echo -e "\n$TEXT\n"
                elif [[ "$two" = "" ]]; then
                    echo -e "Beware of dragons! deleted passwords are gone forever, delete with caution.\n"
                        DELETE
                        echo -e "\n$TEXT\n"
                fi;;
        #delete        














































esac
