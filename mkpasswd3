#!/bin/bash
#interactive password generator v3
set -e

VARIANT=$(uname -o)
ONE=$1;TWO=$2;THREE=$3;FOUR=$4;FIVE=$5;SIX=$6
STR='\e[9m';IKE='\e[0m';NC='\033[0m';LG="\033[1;32m";LR='\033[1;31m'
EXE="mkpasswd"
BIN="/usr/bin/$exe"
DIR="~/.configfile"
PASSWORD="$DIR/passwords.txt"
ACCOUNT="$IR/.account"
TOKEN_FILE="$DIR/.token";
METADATA="$DIR/.metadata";
ERROR_FILE="$DIR/.error"
GET="curl -X POST -s --show-error"
INFO="To save passwords, an ID of what the password is being used for is assigned to "
INFO2="the password to help remember the purpose of the password. Example 'ID: yahoo'"
INFO_TXT() { 
    echo $INFO; echo $INFO2
}
TEXT="type '$EXE' for more info";
LINK="https://github.com/looneytkp/make-passwd/blob/master/$EXE"
NULL="${LR}-X${NC} Null input!"
SHORT() { </dev/urandom tr -dc '9538207164!@#?$%DJALGSKHFqwertypoiuMZNXBCVfldkahjsPQOWEIRUTY' | head -c8; $e ""
}
LONG() {
    strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; $e
}
shopt -u nocasematch

CHECK() {
if [ ! -e $BIN ]; then
    echo "- $exe is not installed. Download & '${LG}bash mkpasswd -i or -i --all${NC}' to install.";
    exit
fi
}

case $1 in

    #info
    "") CHECK
        echo
        echo "Usage: '$EXE [OPTION]...'"
        echo "OR:    '$EXE [OPTION]... [ID]...'"
        echo "Creates and stores passwords with assigned ID's."
        echo -e "Example: $EXE -l nameOf-ID\n";
        echo -e "OPTIONS selection and interpretation:\n"
        echo "  -l, --LONG                   - LONG passwords."
        echo "  -s, --SHORT                  - SHORT passwords."
        echo "  -c, --custom                 - custom passwords."
        echo "  -L, --list                   - lists saved passwords."
        echo "  -S, --search                 - search for passwords."
        echo "  -d, --delete(-del)           - delete passwords."
        echo "  -D, --delete-all(-del-all)   - deletes all passwords."
        echo "  -b, --backup                 - backup passwords to Dropbox."
        echo "  -r, --rename                 - rename passwords."
        echo -e "  -u, --uninstall              - uninstall $EXE.\n"
        ;;
    #info
    
    #long, short and custom passwords
    -s|-l|-c|--short|--long|--custom)
        MULTI() {
            if [ $ONE = "-l" -o $ONE = "--long"]; then
                echo -e "[Long Password]\n";
            elif [ $ONE = "-s" -o $ONE = "--short" ]; then
                echo -e "[Short Password]\n"
            elif [ $ONE = "-c" -o $ONE = "--custom" ]; then
                echo -e "[Custom Password]\n"
            fi
            for ID in $TWO $THREE $FOUR $FIVE $SIX
            do
                if grep -iwq "$ID" $PASSWORD; then
                    SED_ID=$(grep -iw $ID $PASSWORD | sed "s/"$ID": //")
                    echo -e "- $ID exists: ${LG}$SED_ID${NC}"
                    read -p "- Update $ID ? <y/n>: " UPDATE
                    case $UPDATE in
                        "") echo -e $NULL;;
                        y)  GREP_ID=$(grep -iw $ID $PASSWORD | sed "s/$ID: //")
                            echo -e "- Previous: ${LR}${STR}$GREP_ID${IKE}${NC}"
                            if [ $ONE = "-l" -o $ONE = "--long"]; then
                                sed -i "s/$ID: .*/$ID: "$(LONG)"/" $PASSWORD
                            elif [ $ONE = "-s" -o $ONE = "--short" ]; then
                                sed -i "s/$ID: .*/$ID: "$(SHORT)"/" $PASSWORD
                            elif [ $ONE = "-c" -o $ONE = "--custom" ]; then
                                read -p "- New password: " NEW;
                                sed -i "s/$ID: .*/$ID: "$NEW"/" $PASSWORD
                            fi                  
                            echo -e "- $ID: ${LG}$GREP_ID${NC}";;
                        n)  echo "- Cancelled.";;
                    esac
                else 
                    if [ $ONE = "-l" -o $ONE = "--long"]; then
                        LONG=$(LONG);
                        echo -e "- $ID: ${LG}$LONG${NC}"
                        echo "$ID: $LONG" >> $PASSWORD
                    elif [ $ONE = "-s" -o $ONE = "--short" ]; then
                        SHORT=$(SHORT);
                        echo -e "- $ID: ${LG}$SHORT${NC}"
                        echo "$ID: $SHORT" >> $PASSWORD
                    elif [ $ONE = "-c" -o $ONE = "--custom" ]; then
                        printf "%b" "- Input custom password:"; read -p " " PASS;
                        case $PASS in
                            "") echo -e "${LR}-X${NC} Null ID!";;
                            *)  echo "$ID: $PASS" >> $PASSWORD
                                echo -e "- ${LG}$ID${NC} and password is saved.";;
                        esac
                    fi
                fi
            done;
                 }
        SINGLE() {
            if [ $ONE = "-l" -o $ONE = "--long" ]; then
                echo -e "[Long Password]\n"
                read -p "- Enter ID: " ID
                case $ID in
                    "") echo -e "$NULL";;
                    *)  LONGER;;
                esac
            elif [ $ONE = "-s" -o $ONE = "--short" ]; then
                echo -e "[Short Password]\n"
                read -p "- Enter ID: " ID
                case $ID in
                    "") echo -e $NULL;;
                    *)  SHORTER;;
                esac
            elif [ $ONE = "-c" -o $ONE = "--custom" ]; then
                echo -e "[Custom Password]\n"
                read -p "- Enter ID: " ID
                case $ID in
                    "") echo -e $NULL;;
                    *)  CUSTOM;;
                esac
            fi
                 }
        CHECK
        if [ "$TWO" != "" ]; then echo;
            MULTI; echo -e "\n$TEXT\n"
        elif [ "$TWO" == "" ]; then echo;
            SINGLE; echo -e "\n$TEXT\n"
        fi
        ;;
        #long and short passwords









































esac
